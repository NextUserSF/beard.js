// Generated by CoffeeScript 1.6.3
(function() {
  describe('Data Tag', function() {
    var ret, tpl;
    tpl = null;
    ret = null;
    beforeEach(function() {
      return tpl = new Beard();
    });
    afterEach(function() {
      return tpl = null;
    });
    describe('Plain Variable', function() {
      it('should return correct value', function() {
        tpl.set('<%= variable %>');
        tpl.addVariable('variable', 'Variable');
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Variable', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.variable %>');
        tpl.addVariable('nested', {
          variable: 'Nested Variable'
        });
        ret = tpl.render();
        return expect(ret).toEqual('Nested Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= nested.variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Plain Function Call', function() {
      it('should return correct value', function() {
        tpl.set('<%= func() %>');
        tpl.addVariable('func', function() {
          return 'Function call';
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      it('should return default value', function() {
        tpl.set('<%= func() | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
      return it('should handle `this` correct', function() {
        tpl.set('<%= full_name() %>');
        tpl.addVariable('first_name', 'John');
        tpl.addVariable('last_name', 'Doe');
        tpl.addVariable('full_name', function() {
          return "" + this.first_name + " " + this.last_name;
        });
        ret = tpl.render();
        return expect(ret).toEqual('John Doe');
      });
    });
    describe('Plain Function Call with Arguments', function() {
      it('should return correct value', function() {
        tpl.set('<%= func("Function call") %>');
        tpl.addVariable('func', function(x) {
          return x;
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      return it('should return default value', function() {
        tpl.set('<%= func("Function call") | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Function Call', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.func() | "Default" %>');
        tpl.addVariable('nested', {
          func: function() {
            return 'Function call';
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      it('should return default value', function() {
        tpl.set('<%= nested.func() | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
      return it('should handle `this` correct', function() {
        tpl.set('<%= nested.full_name() %>');
        tpl.addVariable('first_name', 'Robert');
        tpl.addVariable('last_name', 'Roe');
        tpl.addVariable('full_name', function() {
          return "" + this.first_name + " " + this.last_name;
        });
        tpl.addVariable('nested', {
          first_name: 'John',
          last_name: 'Doe',
          full_name: function() {
            return "" + this.first_name + " " + this.last_name;
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('John Doe');
      });
    });
    describe('Nested Function Call with Arguments', function() {
      return it('should return correct value', function() {
        tpl.set('<%= nested.func("Function call") | "Default" %>');
        tpl.addVariable('nested', {
          func: function(x) {
            return x;
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
    });
    describe('Plain Function-Variable mixture', function() {
      it('should return correct value', function() {
        tpl.set('<%= func().variable %>');
        tpl.addVariable('func', function() {
          return {
            variable: 'Variable'
          };
        });
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= func().variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Plain Function-Variable mixture (Arguments)', function() {
      it('should return correct value', function() {
        tpl.set('<%= func("variable", "Variable").variable %>');
        tpl.addVariable('func', function(x, y) {
          var o;
          o = {};
          o[x] = y;
          return o;
        });
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= func("variable", "Variable").variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Function-Variable mixture', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.func().nested.variable %>');
        tpl.addVariable('nested', {
          func: function() {
            return {
              nested: {
                variable: 'Variable'
              }
            };
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= nested.func().nested.variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Function-Variable mixture (Arguments)', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.func("nested", "variable", "Variable").nested.variable %>');
        tpl.addVariable('nested', {
          func: function(x, y, z) {
            var o;
            o = {};
            o[x] = {};
            o[x][y] = z;
            return o;
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
      return it('should return default value', function() {
        tpl.set('<%= nested.func("nested", "varialbe", "Variable").nested.variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Plain Function-Function mixture', function() {
      it('should return correct value', function() {
        tpl.set('<%= func().func() %>');
        tpl.addVariable('func', function() {
          return {
            func: function() {
              return 'Function call';
            }
          };
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      return it('should return default value', function() {
        tpl.set('<%= func().func() | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Plain Function-Function mixture (Arguments)', function() {
      it('should return correct value', function() {
        tpl.set('<%= func("Function").func("call") %>');
        tpl.addVariable('func', function(x) {
          return {
            func: function(y) {
              return "" + x + " " + y;
            }
          };
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      return it('should return default value', function() {
        tpl.set('<%= func("Function").func("call") | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Function-Function mixture', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.func().nested.func() %>');
        tpl.addVariable('nested', {
          func: function() {
            return {
              nested: {
                func: function() {
                  return 'Function call';
                }
              }
            };
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      return it('should return default value', function() {
        tpl.set('<%= nested.func().nested.func() | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    describe('Nested Function-Function mixture (Arguments)', function() {
      it('should return correct value', function() {
        tpl.set('<%= nested.func("Function").nested.func("call") %>');
        tpl.addVariable('nested', {
          func: function(x) {
            return {
              nested: {
                func: function(y) {
                  return "" + x + " " + y;
                }
              }
            };
          }
        });
        ret = tpl.render();
        return expect(ret).toEqual('Function call');
      });
      return it('should return default value', function() {
        tpl.set('<%= nested.func("Function").nested.func("call") | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
    });
    return describe('Default parameters', function() {
      it('should return String', function() {
        tpl.set('<%= variable | "Default" %>');
        ret = tpl.render();
        return expect(ret).toEqual('Default');
      });
      it('should return Integer', function() {
        tpl.set('<%= variable | 1024 %>');
        ret = tpl.render();
        return expect(ret).toEqual('1024');
      });
      return it('should return Boolean', function() {
        tpl.set('<%= variable | true %>');
        ret = tpl.render();
        return expect(ret).toEqual('true');
      });
    });
  });

  describe('Comment Tag', function() {
    var ret, tpl;
    tpl = null;
    ret = null;
    beforeEach(function() {
      tpl = new Beard();
      tpl.set('<%# This is comment %>');
      return ret = tpl.render();
    });
    afterEach(function() {
      return tpl = null;
    });
    return it('should return nothing', function() {
      return expect(ret).toEqual('');
    });
  });

  describe('Element Tag', function() {
    var ret, tpl;
    tpl = null;
    ret = null;
    beforeEach(function() {
      return tpl = new Beard();
    });
    afterEach(function() {
      return tpl = null;
    });
    describe('Plain Element', function() {
      return it('should return correct value', function() {
        tpl.set('<%@ element %>');
        tpl.addElement('element', 'Element');
        ret = tpl.render();
        return expect(ret).toEqual('Element');
      });
    });
    describe('Element with Variable', function() {
      return it('should return correct value', function() {
        tpl.set('<%@ element %>');
        tpl.addElement('element', '<%= variable %>');
        tpl.addVariable('variable', 'Variable');
        ret = tpl.render();
        return expect(ret).toEqual('Variable');
      });
    });
    return describe('Element with Element', function() {
      return it('should return correct value', function() {
        tpl.set('<%@ element %>');
        tpl.addElement('element', '<%@ another_element %>');
        tpl.addElement('another_element', 'Element');
        ret = tpl.render();
        return expect(ret).toEqual('Element');
      });
    });
  });

  describe('Block Helpers', function() {
    var ret, tpl;
    tpl = null;
    ret = null;
    beforeEach(function() {
      return tpl = new Beard();
    });
    afterEach(function() {
      return tpl = null;
    });
    describe('Foreach Iterator (Array)', function() {
      beforeEach(function() {
        return tpl.addVariable('planets', ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']);
      });
      it('should return correct values', function() {
        tpl.set('<% foreach planets %>Hello <%= value %> <% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('Hello Mercury Hello Venus Hello Earth Hello Mars Hello Jupiter Hello Saturn Hello Uranus Hello Neptune ');
      });
      it('should return correct keys', function() {
        tpl.set('<% foreach planets %><%= key %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('01234567');
      });
      return it('should return correct keys and values', function() {
        tpl.set('<% foreach planets %><%= key %><%= value %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('0Mercury1Venus2Earth3Mars4Jupiter5Saturn6Uranus7Neptune');
      });
    });
    describe('Foreach Iterator (Object)', function() {
      beforeEach(function() {
        return tpl.addVariable('planets', {
          me: 'Mercury',
          ve: 'Venus',
          ea: 'Earth',
          ma: 'Mars',
          ju: 'Jupiter',
          sa: 'Saturn',
          ur: 'Uranus',
          ne: 'Neptune'
        });
      });
      it('should return correct values', function() {
        tpl.set('<% foreach planets %><%= value %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('MercuryVenusEarthMarsJupiterSaturnUranusNeptune');
      });
      it('should return correct keys', function() {
        tpl.set('<% foreach planets%><%= key %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('meveeamajusaurne');
      });
      return it('should return correct keys and values', function() {
        tpl.set('<% foreach planets%><%= key %><%= value %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('meMercuryveVenuseaEarthmaMarsjuJupitersaSaturnurUranusneNeptune');
      });
    });
    describe('Foreach Iterator (No Data)', function() {
      return it('should return nothing', function() {
        tpl.set('<% foreach planets %><%= key %><%= value %><% endforeach %>');
        ret = tpl.render();
        return expect(ret).toEqual('');
      });
    });
    return describe('Foreach Iterator (Invalid Data)', function() {
      return it('should throw an error', function() {
        tpl.set('<% foreach planets %><%= key %><%= value %><% endforeach %>');
        tpl.addVariable('planets', 1024);
        return expect(function() {
          return tpl.render();
        }).toThrow();
      });
    });
  });

}).call(this);
